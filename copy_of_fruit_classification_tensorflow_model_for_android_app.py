# -*- coding: utf-8 -*-
"""Copy of Fruit Classification TensorFlow Model for Android App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t9O3-_pwHFBsM2cRUpDHvN057-NDAHzv
"""

from google.colab import drive
drive.mount('/content/drive')

!wget https://bitbucket.org/ishaanjav/code-and-deploy-custom-tensorflow-lite-model/raw/a4febbfee178324b2083e322cdead7465d6fdf95/fruits.zip

!unzip fruits.zip

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np

image_height,image_width=32,32
batch_size=20
train_ds=tf.keras.utils.image_dataset_from_directory(
    "fruits/train",
    image_size=(image_height,image_width),
    batch_size=batch_size
)
val_ds=tf.keras.utils.image_dataset_from_directory(
    "fruits/validation",
    image_size=(image_height,image_width),
    batch_size=batch_size
)

test_ds=tf.keras.utils.image_dataset_from_directory(
    "fruits/test",
    image_size=(image_height,image_width),
    batch_size=batch_size
)

class_name=["apple","banana","orang"]
plt.figure(figsize=(10,10))
for image,label in train_ds.take(1):
  for i in range(9):
    ax=plt.subplot(3,3,i+1)
    plt.imshow(image[i].numpy().astype("uint8"))
    plt.title(class_name[label[i]])
    plt.axis("off")

model=tf.keras.Sequential(
    [
        tf.keras.layers.Rescaling(1./255),
        tf.keras.layers.Conv2D(32,3,activation="relu"),
        tf.keras.layers.MaxPooling2D(),
        tf.keras.layers.Conv2D(64,3,activation="relu"),
        tf.keras.layers.MaxPooling2D(),
        tf.keras.layers.Conv2D(128,3,activation="relu"),
        tf.keras.layers.MaxPooling2D(),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(128,activation="softmax"),
        tf.keras.layers.Dense(3)
    ]
)

model.compile(
    optimizer="rmsprop",
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics=["accuracy"]
)

model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=20
)

plt.figure(figsize=(10,10))
for images,labels in test_ds.take(1):
  classifications=model(images)

  for i in range(9):
    ax=plt.subplot(3,3,i+1)
    plt.imshow(images[i].numpy().astype("uint8"))
    index=np.argmax(classifications[i])
    plt.title("pred:" + class_name[index] +" |Real: " + class_name[labels[i]])

converter=tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model=converter.convert()
with open("model.tflite",'wb')as f:
  f.write(tflite_model)

